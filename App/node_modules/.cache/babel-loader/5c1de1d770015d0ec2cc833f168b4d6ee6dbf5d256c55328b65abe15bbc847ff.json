{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./styles/PlataformaGestion.css';import{useNavigate,Link}from\"react-router-dom\";/*Como tal, la plataforma, sea desde registro o desde iniciar sesión, siempre recibe una id de usuario, ésta\r\nid nos servirá para sellar el usuario del sistema a usar, será el parámetro id de usuario*/import{useParams}from'react-router-dom';//Base de datos por firebase\nimport app from\"../firebaseConfig.js\";import{getDatabase,get,ref,onValue}from'firebase/database';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function CrearProyecto(){const{usuarioID}=useParams();//Usamos el state para restaurar datos o información\nconst[usuarioActual,setUsuarioActual]=useState(null);const[proyectos,setProyectos]=useState([]);const navigate=useNavigate();useEffect(()=>{const fetchUsuario=async()=>{try{//Primero seteamos la base de datos como tal, checando directamente la id\nconst db=getDatabase(app);const dbRef=ref(db,\"usuarios/\".concat(usuarioID));//Tomamos la data directamente de dicho usuarioID\nconst snapshot=await get(dbRef);//Checamos si existe un snapshot con dicha información específica\nif(snapshot.exists()){//Extraemos la información del usuario del snapshot\nconst userData=snapshot.val();//Seteamos la data de usuario en nuestro estado global de usuario\nsetUsuarioActual(userData);}else{console.log(\"No se encontró un usuario con dicha información\");}}catch(error){console.error(\"Error consiguiendo la información del usuario\");}};fetchUsuario();// Fetch projects\nconst fetchProyectos=async()=>{try{const db=getDatabase(app);const proyectosRef=ref(db,'proyectos');onValue(proyectosRef,snapshot=>{const data=snapshot.val();if(data){const proyectosArray=Object.keys(data).map(key=>({id:key,...data[key]}));setProyectos(proyectosArray);}else{setProyectos([]);}});}catch(error){console.error(\"Error fetching projects:\",error);}};fetchProyectos();},[usuarioID]);return/*#__PURE__*/_jsx(\"section\",{className:\"App-content\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"proyectos-lista\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Proyectos\"}),/*#__PURE__*/_jsx(\"ul\",{children:proyectos.map(proyecto=>/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(Link,{to:\"/Proyecto/\".concat(proyecto.id),children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:proyecto.nombre}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Fecha de Deadline:\"}),\" \",proyecto.fecha]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"L\\xEDder:\"}),\" \",proyecto.lider]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Colaboradores:\"}),\" \",proyecto.colaboradores.join(', ')]})]})})},proyecto.id))})]})});}","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Link","useParams","app","getDatabase","get","ref","onValue","jsx","_jsx","jsxs","_jsxs","CrearProyecto","usuarioID","usuarioActual","setUsuarioActual","proyectos","setProyectos","navigate","fetchUsuario","db","dbRef","concat","snapshot","exists","userData","val","console","log","error","fetchProyectos","proyectosRef","data","proyectosArray","Object","keys","map","key","id","className","children","proyecto","to","nombre","fecha","lider","colaboradores","join"],"sources":["C:/Users/Usuario/Documents/GitHub/Gestionador-Proyectos-Grupal/frontend/src/components/EnlistarProyecto.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './styles/PlataformaGestion.css';\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\n\r\n/*Como tal, la plataforma, sea desde registro o desde iniciar sesión, siempre recibe una id de usuario, ésta\r\nid nos servirá para sellar el usuario del sistema a usar, será el parámetro id de usuario*/\r\nimport { useParams } from 'react-router-dom';\r\n\r\n//Base de datos por firebase\r\nimport app from \"../firebaseConfig.js\";\r\nimport { getDatabase, get, ref, onValue } from 'firebase/database';\r\n\r\nexport default function CrearProyecto() {\r\n    const { usuarioID } = useParams();\r\n\r\n    //Usamos el state para restaurar datos o información\r\n    const [usuarioActual, setUsuarioActual] = useState(null);\r\n    const [proyectos, setProyectos] = useState([]);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const fetchUsuario = async () => {\r\n            try {\r\n                //Primero seteamos la base de datos como tal, checando directamente la id\r\n                const db = getDatabase(app);\r\n                const dbRef = ref(db, `usuarios/${usuarioID}`);\r\n\r\n                //Tomamos la data directamente de dicho usuarioID\r\n                const snapshot = await get(dbRef);\r\n\r\n                //Checamos si existe un snapshot con dicha información específica\r\n                if (snapshot.exists()) {\r\n                    //Extraemos la información del usuario del snapshot\r\n                    const userData = snapshot.val();\r\n\r\n                    //Seteamos la data de usuario en nuestro estado global de usuario\r\n                    setUsuarioActual(userData);\r\n                } else {\r\n                    console.log(\"No se encontró un usuario con dicha información\")\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error consiguiendo la información del usuario\")\r\n            }\r\n        };\r\n\r\n        fetchUsuario();\r\n\r\n        // Fetch projects\r\n        const fetchProyectos = async () => {\r\n            try {\r\n                const db = getDatabase(app);\r\n                const proyectosRef = ref(db, 'proyectos');\r\n                onValue(proyectosRef, (snapshot) => {\r\n                    const data = snapshot.val();\r\n                    if (data) {\r\n                        const proyectosArray = Object.keys(data).map(key => ({ id: key, ...data[key] }));\r\n                        setProyectos(proyectosArray);\r\n                    } else {\r\n                        setProyectos([]);\r\n                    }\r\n                });\r\n            } catch (error) {\r\n                console.error(\"Error fetching projects:\", error);\r\n            }\r\n        };\r\n\r\n        fetchProyectos();\r\n    }, [usuarioID]);\r\n\r\n    return (\r\n        <section className=\"App-content\">\r\n            <div className=\"proyectos-lista\">\r\n                <h2>Proyectos</h2>\r\n                <ul>\r\n                    {proyectos.map(proyecto => (\r\n                        <li key={proyecto.id}>\r\n                            <Link to={`/Proyecto/${proyecto.id}`}>\r\n                                <div>\r\n                                    <h3>{proyecto.nombre}</h3>\r\n                                    <p><strong>Fecha de Deadline:</strong> {proyecto.fecha}</p>\r\n                                    <p><strong>Líder:</strong> {proyecto.lider}</p>\r\n                                    <p><strong>Colaboradores:</strong> {proyecto.colaboradores.join(', ')}</p>\r\n                                </div>\r\n                            </Link>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}