{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Documents\\\\GitHub\\\\Gestionador-Proyectos-Grupal\\\\frontend\\\\src\\\\components\\\\UnirseProyecto.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './styles/UnirseProyecto.css';\nimport { useNavigate } from \"react-router-dom\";\n\n/*Como tal, la plataforma, sea desde registro o desde iniciar sesión, siempre recibe una id de usuario, ésta\r\nid nos servirá para sellar el usuario del sistema a usar, será el parámetro id de usuario*/\nimport { useParams } from 'react-router-dom';\n\n//Base de datos por firebase\nimport app from \"../firebaseConfig.js\";\nimport { getDatabase, get, ref, update } from 'firebase/database';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CrearProyecto() {\n  _s();\n  const {\n    usuarioID\n  } = useParams();\n\n  //Usamos el state para restaurar datos o información\n  const [usuarioActual, setUsuarioActual] = useState(null);\n\n  //Muy basado en Registrar.jsx, checar la documentación de éste\n  const [buscarProyecto, setBuscarProyecto] = useState({\n    codigo: \"\"\n  });\n  const [proyectos, setProyectos] = useState([]);\n  const navigate = useNavigate();\n  console.log(\"Parametro recibido: \", usuarioID);\n\n  //Sacamos los datos de los usuarios\n  useEffect(() => {\n    const fetchUsuario = async () => {\n      try {\n        //Primero seteamos la base de datos como tal, checando directamente la id\n        const db = getDatabase(app);\n        const dbRef = ref(db, `usuarios/${usuarioID}`);\n\n        //Tomamos la data directamente de dicho usuarioID\n        const snapshot = await get(dbRef);\n\n        //Checamos si existe un snapshot con dicha información específica\n        if (snapshot.exists()) {\n          //Extraemos la información del usuario del snapshot\n          const userData = snapshot.val();\n\n          //Seteamos la data de usuario en nuestro estado global de usuario\n          setUsuarioActual(userData);\n        } else {\n          console.log(\"No se encontró un usuario con dicha información\");\n        }\n      } catch (error) {\n        console.error(\"Error consiguiendo la información del usuario\");\n      }\n    };\n    const fetchProyectos = async () => {\n      const db = getDatabase(app);\n      const dbRef = ref(db, \"proyectos\");\n      const snapshot = await get(dbRef);\n      if (snapshot.exists) {\n        const myData = snapshot.val();\n        const temporaryArray = Object.keys(myData).map(myID => {\n          return {\n            ...myData[myID],\n            codigoGrupo: myID\n          };\n        });\n        setProyectos(temporaryArray);\n        console.log(\"Todos los proyectos en el sistema: \", temporaryArray);\n      } else {\n        console.log(\"No hay valores dentro de nuestra tabla de base de datos\");\n      }\n    };\n    fetchUsuario();\n    fetchProyectos();\n  }, [usuarioID]); //Incluimos éste caso como dependencia para recorrer el efecto si hay cambios\n\n  //Función para establecer cambios\n  const handleUserChange = event => {\n    setBuscarProyecto(prev => ({\n      ...prev,\n      [event.target.name]: event.target.value\n    }));\n  };\n  const handleUnirseProyecto = async event => {\n    event.preventDefault();\n    try {\n      if (!buscarProyecto.codigo) {\n        alert('Por favor, complete todos los campos.');\n        return;\n      }\n      console.log(\"Data que ha ingresado el usuario: \", buscarProyecto.codigo);\n\n      //Pasamos check si el usuario digitó el correo igual que uno de los códigos del grupo\n      const proyectoUnirse = proyectos.find(proyecto => proyecto.codigoGrupo === buscarProyecto.codigo);\n      if (!proyectoUnirse) {\n        alert(\"No se encontró ningún con dicho código de proyecto, por favor intentélo con otro\");\n        return;\n      }\n\n      //Checamos si el usuario ya es un colaborador\n      if (proyectoUnirse.colaboradores.includes(usuarioID)) {\n        alert(\"¡Ya eres colaborador en éste proyecto!\");\n        return;\n      }\n\n      //En caso de encontrar uno de los casos entonces...\n      const db = getDatabase(app);\n      const proyectoRef = ref(db, \"proyectos/\" + proyectoUnirse.codigoGrupo);\n      await update(proyectoRef, {\n        colaboradores: [...proyectoUnirse.colaboradores, usuarioID]\n      });\n      alert(`El usuario ha sido agregado a proyecto: ${proyectoUnirse.nombre}`);\n      navigate(`/Proyectos/${usuarioID}`);\n    } catch (error) {\n      console.error(\"Ha aparecido un error: \", error);\n      alert(\"Error al guardar los datos\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"App-content\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"Form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Elemento\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"Titulo\",\n          children: \"Unirse a grupo de proyecto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Elemento\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"C\\xF3digo de grupo de proyecto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: 'text',\n          placeholder: \"-NuHuUnlilqNEUebVIFz\",\n          name: \"codigo\",\n          onChange: handleUserChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Elemento\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUnirseProyecto,\n          children: \"Unirse a Proyecto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 7\n  }, this);\n}\n_s(CrearProyecto, \"vLbZoJN/PDLhW4ePQK3FTa6p2y8=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = CrearProyecto;\nvar _c;\n$RefreshReg$(_c, \"CrearProyecto\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","app","getDatabase","get","ref","update","jsxDEV","_jsxDEV","CrearProyecto","_s","usuarioID","usuarioActual","setUsuarioActual","buscarProyecto","setBuscarProyecto","codigo","proyectos","setProyectos","navigate","console","log","fetchUsuario","db","dbRef","snapshot","exists","userData","val","error","fetchProyectos","myData","temporaryArray","Object","keys","map","myID","codigoGrupo","handleUserChange","event","prev","target","name","value","handleUnirseProyecto","preventDefault","alert","proyectoUnirse","find","proyecto","colaboradores","includes","proyectoRef","nombre","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Usuario/Documents/GitHub/Gestionador-Proyectos-Grupal/frontend/src/components/UnirseProyecto.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './styles/UnirseProyecto.css';\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\n/*Como tal, la plataforma, sea desde registro o desde iniciar sesión, siempre recibe una id de usuario, ésta\r\nid nos servirá para sellar el usuario del sistema a usar, será el parámetro id de usuario*/\r\nimport { useParams } from 'react-router-dom';\r\n\r\n//Base de datos por firebase\r\nimport app from \"../firebaseConfig.js\";\r\nimport { getDatabase, get, ref, update } from 'firebase/database';\r\n\r\nexport default function CrearProyecto() {\r\n    const { usuarioID } = useParams();\r\n\r\n    //Usamos el state para restaurar datos o información\r\n    const [usuarioActual, setUsuarioActual] = useState(null);\r\n\r\n    //Muy basado en Registrar.jsx, checar la documentación de éste\r\n    const [buscarProyecto, setBuscarProyecto] = useState({\r\n      codigo: \"\"\r\n    })\r\n\r\n    const [proyectos, setProyectos] = useState([]);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    console.log(\"Parametro recibido: \", usuarioID);\r\n\r\n    //Sacamos los datos de los usuarios\r\n    useEffect(() => {\r\n        const fetchUsuario = async() => {\r\n            try {\r\n                //Primero seteamos la base de datos como tal, checando directamente la id\r\n                const db = getDatabase(app);\r\n                const dbRef = ref(db, `usuarios/${usuarioID}`);\r\n\r\n                //Tomamos la data directamente de dicho usuarioID\r\n                const snapshot = await get(dbRef);\r\n\r\n                //Checamos si existe un snapshot con dicha información específica\r\n                if (snapshot.exists()) {\r\n                    //Extraemos la información del usuario del snapshot\r\n                    const userData = snapshot.val();\r\n\r\n                    //Seteamos la data de usuario en nuestro estado global de usuario\r\n                    setUsuarioActual(userData);\r\n                }else{\r\n                    console.log(\"No se encontró un usuario con dicha información\")\r\n                }\r\n            }catch(error){\r\n                console.error(\"Error consiguiendo la información del usuario\")\r\n            }\r\n        };\r\n\r\n        const fetchProyectos = async() => {\r\n            const db = getDatabase(app);\r\n            const dbRef = ref(db, \"proyectos\");\r\n            const snapshot = await get(dbRef);\r\n\r\n            if (snapshot.exists){\r\n                const myData = snapshot.val()\r\n\r\n                const temporaryArray = Object.keys(myData).map(myID => {\r\n                    return {\r\n                        ...myData[myID],\r\n                        codigoGrupo: myID\r\n                    }\r\n                });\r\n\r\n                setProyectos(temporaryArray);\r\n                console.log(\"Todos los proyectos en el sistema: \", temporaryArray);\r\n            }else{\r\n                console.log(\"No hay valores dentro de nuestra tabla de base de datos\");\r\n            }\r\n        }\r\n\r\n        fetchUsuario();\r\n        fetchProyectos();\r\n    }, [usuarioID]); //Incluimos éste caso como dependencia para recorrer el efecto si hay cambios\r\n\r\n\r\n    //Función para establecer cambios\r\n    const handleUserChange = (event) => {\r\n      setBuscarProyecto(\r\n        prev => ({...prev, [event.target.name]: event.target.value})\r\n      );\r\n    }\r\n\r\n\r\n    const handleUnirseProyecto = async(event) => {\r\n        event.preventDefault();\r\n        try{\r\n            if (!buscarProyecto.codigo) {\r\n                alert('Por favor, complete todos los campos.');\r\n                return;\r\n            }\r\n\r\n            console.log(\"Data que ha ingresado el usuario: \", buscarProyecto.codigo);\r\n\r\n            //Pasamos check si el usuario digitó el correo igual que uno de los códigos del grupo\r\n            const proyectoUnirse = proyectos.find(proyecto => proyecto.codigoGrupo === buscarProyecto.codigo);\r\n            if (!proyectoUnirse){\r\n                alert(\"No se encontró ningún con dicho código de proyecto, por favor intentélo con otro\");\r\n                return;\r\n            }\r\n\r\n            //Checamos si el usuario ya es un colaborador\r\n            if (proyectoUnirse.colaboradores.includes(usuarioID)) {\r\n                alert(\"¡Ya eres colaborador en éste proyecto!\");\r\n                return;\r\n            }\r\n            \r\n            //En caso de encontrar uno de los casos entonces...\r\n            const db = getDatabase(app);\r\n            const proyectoRef = ref(db, \"proyectos/\"+proyectoUnirse.codigoGrupo);\r\n            await update(proyectoRef, {\r\n                colaboradores: [...proyectoUnirse.colaboradores, usuarioID]\r\n            });\r\n\r\n            alert(`El usuario ha sido agregado a proyecto: ${proyectoUnirse.nombre}`);\r\n            navigate(`/Proyectos/${usuarioID}`);\r\n        } catch (error) {\r\n            console.error(\"Ha aparecido un error: \", error);\r\n            alert(\"Error al guardar los datos\");\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n      <section className=\"App-content\">\r\n        <form className='Form'>\r\n          <div className='Elemento'>\r\n            <label className='Titulo'>Unirse a grupo de proyecto</label>\r\n          </div>\r\n\r\n        {/*\r\n          <div className='Elemento'>\r\n            <label>Link de invitado</label>\r\n            <input type={'url'} placeholder='https://link-to-join-group//group-in-term.com' name='link'\r\n            onChange={handleUserChange}/>\r\n          </div>\r\n        */}\r\n\r\n          <div className='Elemento'>\r\n            <label>Código de grupo de proyecto</label>\r\n            <input type={'text'} placeholder='-NuHuUnlilqNEUebVIFz' name='codigo'\r\n            onChange={handleUserChange}/>\r\n          </div>\r\n\r\n          <div className='Elemento'>\r\n            <button onClick={handleUnirseProyecto}>Unirse a Proyecto</button>\r\n          </div>\r\n        </form>\r\n      </section>\r\n    )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}