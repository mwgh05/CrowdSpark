{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./styles/Registrar.css';//Importamos las librerías\n//import axios from 'axios'; //Importamos el encargado de respuestas de api\n//Importamos la URL inicial o base \n//import { URL } from './data.js'\n//Importamos el sistema a cambiar de página\nimport{useNavigate}from\"react-router-dom\";//Base de datos por firebase\nimport app from'../firebaseConfig';import{getDatabase,ref,set,push,get}from\"firebase/database\";//Cambiar modos de contraseña o correo\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function Registrar(){/*Posición 0, el valor como tal, posición 1, la función de set a dicho valor, en éste caso los usaremos\r\n    para los inputs como tal, para encargarnos de ejercer la función de iniciar sesión y registrarse*/ /*Anteriormente yo habría visto un ejemplo de que se tenía que hacer una variable una por una, entonces\r\n    haría una variable con useState para el nombre, correo y contraseña, sin embargo, todo ésto se puede\r\n    reducir a una simple variable como objeto, aquí el ejemplo: (Checar handleUserChange)*/const[usuarioNuevo,setUsuarioNuevo]=useState({nombre:\"\",correo:\"\",password:\"\",admin:false});//Para pruebas, vamos a usar el useState para checar que los datos sean modificados o usados\nconst[usuarios,setUsuarios]=useState([]);//Creamos el método para navegar de página en página, útil luego de crear el usuario como tal\nconst navigate=useNavigate();useEffect(()=>{/*Al inicio del programa, nosotros vamos a encargarnos de usar la conexión con nuestra base de\r\n        datos como tal, y usar los métodos al mismo tiempo de nuestra API*/const fetchAllUsers=async()=>{/*Estamos usando un método de API, por eso mejor usar async, porque es asincrónico y hay que\r\n            esperar a que se apliquen los cambios*/ /*\r\n            Inicialmente ésto era para registrar usuarios con base a una base de datos local, ahora\r\n            usaremos una base de datos de tiempo real\r\n\r\n            try {\r\n                const res = await axios.get(URL + \"/register\");\r\n                setUsuarios(res.data);\r\n                console.log(\"Todos los datos de usuarios: \", res);\r\n            }catch(error){\r\n                console.error(\"Ha aparecido un error: \", error);\r\n            }*/ //Tomamos la base de datos a la cual nos conectamos\nconst db=getDatabase(app);//Referenciamos la base de datos, la ubicación donde guardamos los usuarios\nconst dbRef=ref(db,\"usuarios\");//Buscamos información dentro de los casos, mediante un snapshot\nconst snapshot=await get(dbRef);if(snapshot.exists()){//Si el snapshot existe, entonces vamos a asignar los datos como tal\nsetUsuarios(Object.values(snapshot.val()));console.log(\"Todos los datos de usuarios: \",Object.values(snapshot.val()));/*Inicialmente sin el snapshot.val, tenemos datos estilo json, luego con éste, tendríamos un \r\n                objeto de javascript, y finalmente con Object.values tendríamos un array de objetos JavaScript*/}else{console.log(\"No hay valores dentro de nuestra tabla de base de datos\");}};fetchAllUsers();},[]);const handleUserChange=event=>{/*\r\n        Anteriormente nosotros tendríamos 3 distintas variables y 3 funciones cada una llamando para modificar los\r\n        cambios, pero en éste caso no es necesario, simplemente ocuparemos ésta función ser llamada en cada uno de los\r\n        cambios de cualquier input relacionado\r\n\r\n        const handleNombreChange = (event) => {\r\n            setNombre(event.target.value);\r\n        }\r\n        */setUsuarioNuevo(/*Lo que hacemos es simple, pasamos el valor previo, de acuerdo a dicho valor previo vamos pasando cada uno\r\n        de los datos modificados, basándonos en el nombre del input al cual tomar dicho valor, y como si fuera un json,\r\n        a dicho objeto basado en nombre, le pasamos su valor*/prev=>({...prev,[event.target.name]:event.target.value})/*Ejemplo: \r\n            prev=> ({...prev,\r\n                [event.target.name]: event.target.value })\r\n                \"nombre\": \"Mauricio Hernandez\"\r\n            */);};/*Función encargada de presionar botones Antigua\r\n    const pressRegistrar = async(event) => {\r\n        //Como default tenemos que el botón reinicia la pantalla, para evitar ésto podemos usar:\r\n        event.preventDefault();\r\n        try {\r\n            console.log('Presionamos el botón para encargarnos de iniciar sesión como tal');\r\n            //Primero que todo, vamos a validar que todas las entradas estén válidas\r\n            if (!usuarioNuevo.nombre || \r\n                !usuarioNuevo.correo || \r\n                !usuarioNuevo.password) {\r\n                alert('Por favor, completa todos los campos.');\r\n                return;\r\n            }\r\n\r\n            Ahora, vamos a checar si el usuario es único, para ésto... lo principal es checar con base a el\r\n            correo, si el correo ya existe en la base de datos, entonces avisamos que ya existe\r\n            console.log(\"Correo creado: \", usuarioNuevo)\r\n            const isCorreoUnico = usuarios.every((user) => \r\n                user.correo !== usuarioNuevo.correo\r\n            );\r\n            console.log(\"Checamos valor a ver que tal: \", isCorreoUnico);\r\n\r\n\r\n            if (!isCorreoUnico){\r\n                alert(\"El correo electrónico ya está en uso\");\r\n                return;\r\n            }\r\n\r\n            //Si los campos están completos, llamamos a axios normalmente, al método de post... \r\n            await axios.post(URL + \"/register\", usuarioNuevo);\r\n            //Si no tira error, habremos creado nuestro usuario finalmente\r\n\r\n            console.log(\"El usuario ha sido creado de forma exitosa\")\r\n            \r\n            //TODO Crear una página inicial a la cual ir para el programa, y enviar el usuario acá\r\n            navigate(\"/plataforma\");\r\n        } catch (error) {\r\n            console.error(\"Ha aparecido un error: \", error);\r\n        }\r\n    }*/const registrarBaseDatos=async event=>{event.preventDefault();try{const db=getDatabase();if(!usuarioNuevo.nombre||!usuarioNuevo.correo||!usuarioNuevo.password){alert('Por favor, completa todos los campos.');return;}//Pasamos información del usuario nuevo al nodo de 'usuarios' en la Base de Datos\nconst correoUnico=!usuarios.some(user=>user.correo===usuarioNuevo.correo);if(!correoUnico){alert(\"Ya existe una cuenta en el sistema con el correo electrónico\");return;}//Creamos una carpeta o archivo basado en el string de posición\nconst newUsuarioRef=push(ref(db,\"usuarios\"));await set(newUsuarioRef,{nombre:usuarioNuevo.nombre,correo:usuarioNuevo.correo,password:usuarioNuevo.password,admin:usuarioNuevo.admin});//Extraemos la ID de la recién usada fila creada de usuario\nconst newUsuarioID=newUsuarioRef.key;alert(\"La data ha sido guardada de forma exitosa\");navigate(\"/plataforma/\".concat(newUsuarioID));}catch(error){console.error(\"Ha aparecido un error: \",error);alert(\"Error al guardar los datos\");}};/*Si se completa, entonces simplemente mostramos los datos por ahora, acá haremos la función normal de\r\n    base de datos*/return/*#__PURE__*/_jsx(\"section\",{className:\"App-content\",children:/*#__PURE__*/_jsxs(\"form\",{className:\"Form\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"Elemento\",children:/*#__PURE__*/_jsx(\"label\",{className:\"Titulo\",children:\"Registrar\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"Elemento\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Nombre\"}),/*#__PURE__*/_jsx(\"input\",{type:'text',placeholder:\"Mauricio\",name:\"nombre\",onChange:handleUserChange})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"Elemento\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Correo Electr\\xF3nico\"}),/*#__PURE__*/_jsx(\"input\",{type:'email',placeholder:\"mauHernandez@gmail.com\",name:\"correo\",onChange:handleUserChange})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"Elemento\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Contrase\\xF1a\"}),/*#__PURE__*/_jsx(\"input\",{type:'password',placeholder:\"**********\",name:\"password\",onChange:handleUserChange})]}),/*#__PURE__*/_jsx(\"div\",{className:\"Elemento\",children:/*#__PURE__*/_jsx(\"button\",{onClick:registrarBaseDatos,children:\"Registrarse\"})})]})});}","map":{"version":3,"names":["React","useState","useEffect","useNavigate","app","getDatabase","ref","set","push","get","jsx","_jsx","jsxs","_jsxs","Registrar","usuarioNuevo","setUsuarioNuevo","nombre","correo","password","admin","usuarios","setUsuarios","navigate","fetchAllUsers","db","dbRef","snapshot","exists","Object","values","val","console","log","handleUserChange","event","prev","target","name","value","registrarBaseDatos","preventDefault","alert","correoUnico","some","user","newUsuarioRef","newUsuarioID","key","concat","error","className","children","type","placeholder","onChange","onClick"],"sources":["C:/Users/Usuario/Documents/GitHub/Gestionador-Proyectos-Grupal/frontend/src/components/Registrar.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './styles/Registrar.css'; //Importamos las librerías\r\n\r\n//import axios from 'axios'; //Importamos el encargado de respuestas de api\r\n\r\n//Importamos la URL inicial o base \r\n//import { URL } from './data.js'\r\n\r\n//Importamos el sistema a cambiar de página\r\nimport { useNavigate } from \"react-router-dom\"\r\n\r\n//Base de datos por firebase\r\nimport app from '../firebaseConfig'; \r\nimport { getDatabase, ref, set, push, get } from \"firebase/database\"\r\n\r\n//Cambiar modos de contraseña o correo\r\n\r\nexport default function Registrar() {\r\n    /*Posición 0, el valor como tal, posición 1, la función de set a dicho valor, en éste caso los usaremos\r\n    para los inputs como tal, para encargarnos de ejercer la función de iniciar sesión y registrarse*/\r\n    \r\n    /*Anteriormente yo habría visto un ejemplo de que se tenía que hacer una variable una por una, entonces\r\n    haría una variable con useState para el nombre, correo y contraseña, sin embargo, todo ésto se puede\r\n    reducir a una simple variable como objeto, aquí el ejemplo: (Checar handleUserChange)*/\r\n\r\n    const [usuarioNuevo, setUsuarioNuevo] = useState({\r\n        nombre: \"\",\r\n        correo: \"\",\r\n        password: \"\",\r\n        admin: false\r\n    });\r\n    \r\n    //Para pruebas, vamos a usar el useState para checar que los datos sean modificados o usados\r\n    const [usuarios, setUsuarios] = useState([]);\r\n\r\n    //Creamos el método para navegar de página en página, útil luego de crear el usuario como tal\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        /*Al inicio del programa, nosotros vamos a encargarnos de usar la conexión con nuestra base de\r\n        datos como tal, y usar los métodos al mismo tiempo de nuestra API*/\r\n\r\n        const fetchAllUsers = async () => {\r\n            /*Estamos usando un método de API, por eso mejor usar async, porque es asincrónico y hay que\r\n            esperar a que se apliquen los cambios*/\r\n\r\n            /*\r\n            Inicialmente ésto era para registrar usuarios con base a una base de datos local, ahora\r\n            usaremos una base de datos de tiempo real\r\n\r\n            try {\r\n                const res = await axios.get(URL + \"/register\");\r\n                setUsuarios(res.data);\r\n                console.log(\"Todos los datos de usuarios: \", res);\r\n            }catch(error){\r\n                console.error(\"Ha aparecido un error: \", error);\r\n            }*/\r\n            \r\n            //Tomamos la base de datos a la cual nos conectamos\r\n            const db = getDatabase(app);\r\n\r\n            //Referenciamos la base de datos, la ubicación donde guardamos los usuarios\r\n            const dbRef = ref(db, \"usuarios\");\r\n\r\n            //Buscamos información dentro de los casos, mediante un snapshot\r\n            const snapshot = await get(dbRef);\r\n\r\n            if (snapshot.exists()) {\r\n                //Si el snapshot existe, entonces vamos a asignar los datos como tal\r\n                setUsuarios(Object.values(snapshot.val()));\r\n                console.log(\"Todos los datos de usuarios: \", Object.values(snapshot.val()));\r\n                /*Inicialmente sin el snapshot.val, tenemos datos estilo json, luego con éste, tendríamos un \r\n                objeto de javascript, y finalmente con Object.values tendríamos un array de objetos JavaScript*/\r\n            } else{\r\n                console.log(\"No hay valores dentro de nuestra tabla de base de datos\");\r\n            }\r\n        };\r\n        fetchAllUsers();\r\n    }, [])\r\n\r\n    const handleUserChange = (event) => {\r\n        /*\r\n        Anteriormente nosotros tendríamos 3 distintas variables y 3 funciones cada una llamando para modificar los\r\n        cambios, pero en éste caso no es necesario, simplemente ocuparemos ésta función ser llamada en cada uno de los\r\n        cambios de cualquier input relacionado\r\n\r\n        const handleNombreChange = (event) => {\r\n            setNombre(event.target.value);\r\n        }\r\n        */\r\n        setUsuarioNuevo(\r\n        /*Lo que hacemos es simple, pasamos el valor previo, de acuerdo a dicho valor previo vamos pasando cada uno\r\n        de los datos modificados, basándonos en el nombre del input al cual tomar dicho valor, y como si fuera un json,\r\n        a dicho objeto basado en nombre, le pasamos su valor*/\r\n            prev=> ({...prev,\r\n                [event.target.name]: event.target.value })    \r\n\r\n            /*Ejemplo: \r\n            prev=> ({...prev,\r\n                [event.target.name]: event.target.value })\r\n                \"nombre\": \"Mauricio Hernandez\"\r\n            */\r\n        )\r\n    }\r\n\r\n    /*Función encargada de presionar botones Antigua\r\n    const pressRegistrar = async(event) => {\r\n        //Como default tenemos que el botón reinicia la pantalla, para evitar ésto podemos usar:\r\n        event.preventDefault();\r\n        try {\r\n            console.log('Presionamos el botón para encargarnos de iniciar sesión como tal');\r\n            //Primero que todo, vamos a validar que todas las entradas estén válidas\r\n            if (!usuarioNuevo.nombre || \r\n                !usuarioNuevo.correo || \r\n                !usuarioNuevo.password) {\r\n                alert('Por favor, completa todos los campos.');\r\n                return;\r\n            }\r\n\r\n            Ahora, vamos a checar si el usuario es único, para ésto... lo principal es checar con base a el\r\n            correo, si el correo ya existe en la base de datos, entonces avisamos que ya existe\r\n            console.log(\"Correo creado: \", usuarioNuevo)\r\n            const isCorreoUnico = usuarios.every((user) => \r\n                user.correo !== usuarioNuevo.correo\r\n            );\r\n            console.log(\"Checamos valor a ver que tal: \", isCorreoUnico);\r\n\r\n\r\n            if (!isCorreoUnico){\r\n                alert(\"El correo electrónico ya está en uso\");\r\n                return;\r\n            }\r\n\r\n            //Si los campos están completos, llamamos a axios normalmente, al método de post... \r\n            await axios.post(URL + \"/register\", usuarioNuevo);\r\n            //Si no tira error, habremos creado nuestro usuario finalmente\r\n\r\n            console.log(\"El usuario ha sido creado de forma exitosa\")\r\n            \r\n            //TODO Crear una página inicial a la cual ir para el programa, y enviar el usuario acá\r\n            navigate(\"/plataforma\");\r\n        } catch (error) {\r\n            console.error(\"Ha aparecido un error: \", error);\r\n        }\r\n    }*/\r\n    \r\n    const registrarBaseDatos = async(event) => {\r\n        event.preventDefault();\r\n        try{\r\n            const db = getDatabase();\r\n\r\n            if (!usuarioNuevo.nombre || \r\n                !usuarioNuevo.correo || \r\n                !usuarioNuevo.password) {\r\n                alert('Por favor, completa todos los campos.');\r\n                return;\r\n            }\r\n\r\n            //Pasamos información del usuario nuevo al nodo de 'usuarios' en la Base de Datos\r\n            const correoUnico = !usuarios.some(user => user.correo === usuarioNuevo.correo);\r\n            if (!correoUnico){\r\n                alert(\"Ya existe una cuenta en el sistema con el correo electrónico\");\r\n                return;\r\n            }\r\n\r\n            //Creamos una carpeta o archivo basado en el string de posición\r\n            const newUsuarioRef = push(ref(db, \"usuarios\"));\r\n            await set(newUsuarioRef, {\r\n                nombre: usuarioNuevo.nombre,\r\n                correo: usuarioNuevo.correo,\r\n                password: usuarioNuevo.password,\r\n                admin: usuarioNuevo.admin\r\n            });\r\n            //Extraemos la ID de la recién usada fila creada de usuario\r\n            const newUsuarioID = newUsuarioRef.key;\r\n\r\n            alert(\"La data ha sido guardada de forma exitosa\");\r\n\r\n            navigate(`/plataforma/${newUsuarioID}`);\r\n        } catch (error) {\r\n            console.error(\"Ha aparecido un error: \", error);\r\n            alert(\"Error al guardar los datos\");\r\n        }\r\n    }\r\n    /*Si se completa, entonces simplemente mostramos los datos por ahora, acá haremos la función normal de\r\n    base de datos*/\r\n\r\n    return (\r\n      <section className=\"App-content\">\r\n        <form className='Form'>\r\n            <div className='Elemento'>\r\n                <label className='Titulo'>Registrar</label>\r\n            </div>\r\n\r\n            <div className='Elemento'>\r\n                <label>Nombre</label>\r\n                <input type={'text'} placeholder='Mauricio' name='nombre'\r\n                onChange={handleUserChange}/>\r\n            </div>\r\n          \r\n            <div className='Elemento'>\r\n                <label>Correo Electrónico</label>\r\n                <input type={'email'} placeholder='mauHernandez@gmail.com' name='correo'\r\n                onChange={handleUserChange}/>\r\n            </div>\r\n\r\n            <div className='Elemento'>\r\n                <label>Contraseña</label>\r\n                <input type={'password'} placeholder='**********' name='password'\r\n                onChange={handleUserChange}/>\r\n            </div>\r\n\r\n            <div className='Elemento'>\r\n                <button onClick={registrarBaseDatos}>Registrarse</button>\r\n            </div>\r\n\r\n        </form>\r\n      </section>\r\n    )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}