{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Documents\\\\GitHub\\\\Gestionador-Proyectos-Grupal\\\\frontend\\\\src\\\\components\\\\CalendarioEventos.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n//Parte gráfica\nimport { DeleteForever, SupervisorAccount, Settings } from '@mui/icons-material';\nimport './styles/CalendarioEventos.css';\nimport logo from '../images/icon.png';\n\n//Importamos lo del calendario\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport { useNavigate, Link } from \"react-router-dom\";\n\n/*Como tal, la plataforma, sea desde registro o desde iniciar sesión, siempre recibe una id de usuario, ésta\r\nid nos servirá para sellar el usuario del sistema a usar, será el parámetro id de usuario*/\nimport { useParams } from 'react-router-dom';\n\n//Base de datos por firebase\nimport app from \"../firebaseConfig.js\";\nimport { getDatabase, get, ref, set, push, update } from 'firebase/database';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CalendarioEventos() {\n  _s();\n  const {\n    usuarioID\n  } = useParams();\n\n  //Usamos el state para restaurar datos o información\n  const [usuarioActual, setUsuarioActual] = useState(null);\n\n  //Todos los proyectos y las tareas que le toca al usuario con base al usuarioID\n  const [proyectosUsuario, setProyectosUsuario] = useState([]);\n  const [tareasUsuario, setTareasUsuario] = useState([]);\n\n  //Proyectos elegidos del programa\n  const [selectedProyecto, setSelectedProyecto] = useState(null);\n  const [valorPrioridad, setValorPrioridad] = useState(1);\n  const [showFilteredTasks, setShowFilteredTasks] = useState(false);\n  const navigate = useNavigate();\n\n  //TODO Datos como dependencias, prioridad, descripción, más para buscar en un futuro\n\n  //Sacamos los datos de los usuarios\n  useEffect(() => {\n    const fetchUsuario = async () => {\n      try {\n        //Primero seteamos la base de datos como tal, checando directamente la id\n        const db = getDatabase(app);\n        const dbRef = ref(db, `usuarios/${usuarioID}`);\n\n        //Tomamos la data directamente de dicho usuarioID\n        const snapshot = await get(dbRef);\n\n        //Checamos si existe un snapshot con dicha información específica\n        if (snapshot.exists()) {\n          //Extraemos la información del usuario del snapshot\n          const userData = snapshot.val();\n\n          //Seteamos la data de usuario en nuestro estado global de usuario\n          setUsuarioActual(userData);\n          console.log(\"Dentro de crearTarea, si agarramos usuario\");\n        } else {\n          console.log(\"No se encontró un usuario con dicha información\");\n        }\n      } catch (error) {\n        console.error(\"Error consiguiendo la información del usuario\");\n      }\n    };\n    fetchUsuario();\n  }, [usuarioID]); //Incluimos éste caso como dependencia para recorrer el efecto si hay cambios\n\n  //Éste es para extraer todos los proyectos\n  useEffect(() => {\n    if (!usuarioActual) return;\n    const fetchAllProyectosUsuario = async () => {\n      const db = getDatabase(app);\n      const dbRef = ref(db, \"proyectos\");\n      const snapshot = await get(dbRef);\n      if (snapshot.exists()) {\n        const proyectData = snapshot.val();\n        const proyectList = Object.keys(proyectData).map(myID => {\n          return {\n            ...proyectData[myID],\n            proyectoID: myID\n          };\n        });\n\n        /*Una vez tenemos toda la lista como tal, vamos a tomar el valor de colaboradores,\r\n        y vamos a checar o filtrar solo todos los proyectos que tengan al usuarioID como colaborador*/\n\n        console.log(\"Lista de proyectos sin filtrado: \", proyectList);\n        const proyectosUsuario = proyectList.filter(proyecto => proyecto.colaboradores.includes(usuarioID));\n        setProyectosUsuario(proyectosUsuario);\n        console.log(\"Todos los proyectos del usuario: \", proyectosUsuario);\n      }\n    };\n    fetchAllProyectosUsuario();\n  }, [usuarioActual]);\n  const handleCerrarSesion = () => {\n    setUsuarioActual(null);\n    navigate('/');\n  };\n\n  /*Una vez extraídos todos los proyectos en los que se relaciona el usuario, vamos a extraer las tareas que\r\n  se relacionen con dicho proyecto, y de ahí, extraemos las tareas relacionadas con dicho usuario*/\n  const fetchAllTareasUsuario = async () => {\n    const db = getDatabase(app);\n\n    //Inicializamos un array donde se guardan todos las tareas filtradas como tal\n    let allTareas = [];\n\n    //Iteramos por cada uno de los proyectos, para buscar las tareas primeramente\n    for (const proyecto of proyectosUsuario) {\n      const dbRef = ref(db, \"tareas\");\n      const snapshot = await get(dbRef);\n      if (snapshot.exists()) {\n        const tareasData = snapshot.val();\n        const tareas = Object.keys(tareasData).map(myID => {\n          return {\n            ...tareasData[myID],\n            tareaID: myID\n          };\n        });\n\n        //Filtramos la tarea con base al proyecto\n        const tareasProyecto = tareas.filter(tarea => tarea.idProyecto === proyecto.proyectoID);\n        console.log(\"Lista de tareas filtradas por proyecto: \", tareasProyecto);\n\n        //Filtramos las tareas donde el usuario es asignado como encargado\n        const tareasUsuario = tareasProyecto.filter(tarea => tarea.encargados.includes(usuarioID));\n        allTareas = allTareas.concat(tareasUsuario);\n      }\n    }\n    setTareasUsuario(allTareas);\n    console.log(\"Todos las tareas del usuario: \", allTareas);\n  };\n  const filtrarDatos = async () => {\n    //Filtramos las tareas como tal basadas en el nivel de prioridad\n    const filteredTareas = tareasUsuario.filter(tarea => {\n      //Checamos si la tarea como tal es de dicho proyecto\n      const perteneceAProyecto = tarea.idProyecto === selectedProyecto.proyectoID;\n\n      //Checamos si la prioridad de la tarea como tal es  igual al nivel de prioridad\n      const checkPrioridad = parseInt(tarea.prioridad) === valorPrioridad;\n\n      //Retornamos verdadero si se cumplen ambos casos\n      return perteneceAProyecto && checkPrioridad;\n    });\n    //Actualizamos el state de como se filtran las tareas\n\n    setTareasUsuario(filteredTareas);\n    console.log(\"Todos las tareas filtradas basado en prioridad y proyecto: \", filteredTareas);\n  };\n  useEffect(() => {\n    if (!proyectosUsuario) return;\n    fetchAllTareasUsuario();\n  }, [proyectosUsuario, usuarioID]);\n\n  /*Finalmente, el useEffect encargado de dada seleccionada una opción de búsqueda, que muestre los datos\r\n  como tal del proyecto o programa*/\n  useEffect(() => {\n    if (!selectedProyecto || !tareasUsuario.length) return;\n    fetchAllTareasUsuario();\n    filtrarDatos();\n  }, [selectedProyecto, valorPrioridad]);\n\n  /*Creamos o iteramos las tareas como tal, y con base a éstas creamos los eventos como tal*/\n  const events = tareasUsuario.map(tarea => ({\n    //La fecha está en el formato \"YYYY-MM-DDTHH:mm:ss\"\n    start: new Date(tarea.fecha),\n    end: new Date(tarea.fecha),\n    title: tarea.nombre\n  }));\n  if (!usuarioID || !usuarioActual || !proyectosUsuario || !tareasUsuario) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Cargando\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 16\n    }, this);\n  }\n\n  //Función de control\n  const handleProyectoChange = event => {\n    //Primero que todo vamos a agarrar el objeto de búsqueda como tal, y setearlo como producto a buscar\n    const proyectoID = event.target.value;\n    const selected = proyectosUsuario.find(proyecto => proyecto.proyectoID === proyectoID);\n    setSelectedProyecto(selected);\n    console.log(\"Proyecto seleccionado en lista: \", selected);\n  };\n  const handlePrioridadChange = event => {\n    setValorPrioridad(parseInt(event.target.value));\n  };\n\n  // Custom render function for event content\n  const renderEventContent = eventInfo => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: eventInfo.timeText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: eventInfo.event.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"Plataforma\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"Tab\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"Proyex logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Bienvenido: \", usuarioActual.nombre]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCerrarSesion,\n          children: \"Cerrar Sesi\\xF3n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"Calendario\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Buscar por Proyecto: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleProyectoChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Seleccione un Proyecto\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 29\n            }, this), proyectosUsuario.map(proyecto => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: proyecto.proyectoID,\n              children: proyecto.nombre\n            }, proyecto.proyectoID, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Prioridad: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"1\",\n            max: \"10\",\n            value: valorPrioridad,\n            onChange: handlePrioridadChange,\n            className: \"slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider-value\",\n            children: valorPrioridad\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [dayGridPlugin],\n        initialView: \"dayGridMonth\",\n        weekends: true //Mostrar sábado y domingo\n        ,\n        events: events,\n        eventContent: renderEventContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 9\n  }, this);\n}\n_s(CalendarioEventos, \"XQpGfkHaRTbmZ0Vb27PLL5wJpfY=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = CalendarioEventos;\nvar _c;\n$RefreshReg$(_c, \"CalendarioEventos\");","map":{"version":3,"names":["React","useState","useEffect","DeleteForever","SupervisorAccount","Settings","logo","FullCalendar","dayGridPlugin","useNavigate","Link","useParams","app","getDatabase","get","ref","set","push","update","jsxDEV","_jsxDEV","CalendarioEventos","_s","usuarioID","usuarioActual","setUsuarioActual","proyectosUsuario","setProyectosUsuario","tareasUsuario","setTareasUsuario","selectedProyecto","setSelectedProyecto","valorPrioridad","setValorPrioridad","showFilteredTasks","setShowFilteredTasks","navigate","fetchUsuario","db","dbRef","snapshot","exists","userData","val","console","log","error","fetchAllProyectosUsuario","proyectData","proyectList","Object","keys","map","myID","proyectoID","filter","proyecto","colaboradores","includes","handleCerrarSesion","fetchAllTareasUsuario","allTareas","tareasData","tareas","tareaID","tareasProyecto","tarea","idProyecto","encargados","concat","filtrarDatos","filteredTareas","perteneceAProyecto","checkPrioridad","parseInt","prioridad","length","events","start","Date","fecha","end","title","nombre","children","fileName","_jsxFileName","lineNumber","columnNumber","handleProyectoChange","event","target","value","selected","find","handlePrioridadChange","renderEventContent","eventInfo","timeText","className","src","alt","onClick","onChange","type","min","max","plugins","initialView","weekends","eventContent","_c","$RefreshReg$"],"sources":["C:/Users/Usuario/Documents/GitHub/Gestionador-Proyectos-Grupal/frontend/src/components/CalendarioEventos.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n//Parte gráfica\r\nimport { DeleteForever, SupervisorAccount, Settings } from '@mui/icons-material'\r\nimport './styles/CalendarioEventos.css';\r\nimport logo from '../images/icon.png';\r\n\r\n//Importamos lo del calendario\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\n\r\nimport {useNavigate, Link} from \"react-router-dom\";\r\n\r\n/*Como tal, la plataforma, sea desde registro o desde iniciar sesión, siempre recibe una id de usuario, ésta\r\nid nos servirá para sellar el usuario del sistema a usar, será el parámetro id de usuario*/\r\nimport { useParams } from 'react-router-dom';\r\n\r\n//Base de datos por firebase\r\nimport app from \"../firebaseConfig.js\";\r\nimport { getDatabase, get, ref, set, push, update } from 'firebase/database';\r\n\r\nexport default function CalendarioEventos() {\r\n    const { usuarioID } = useParams();\r\n\r\n    //Usamos el state para restaurar datos o información\r\n    const [usuarioActual, setUsuarioActual] = useState(null);\r\n\r\n    //Todos los proyectos y las tareas que le toca al usuario con base al usuarioID\r\n    const [proyectosUsuario, setProyectosUsuario] = useState([]);\r\n    const [tareasUsuario, setTareasUsuario] = useState([])\r\n\r\n    //Proyectos elegidos del programa\r\n    const [selectedProyecto, setSelectedProyecto] = useState(null);\r\n    const [valorPrioridad, setValorPrioridad] = useState(1);\r\n\r\n    const [showFilteredTasks, setShowFilteredTasks] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    //TODO Datos como dependencias, prioridad, descripción, más para buscar en un futuro\r\n\r\n    //Sacamos los datos de los usuarios\r\n    useEffect(() => {\r\n        const fetchUsuario = async() => {\r\n            try {\r\n                //Primero seteamos la base de datos como tal, checando directamente la id\r\n                const db = getDatabase(app);\r\n                const dbRef = ref(db, `usuarios/${usuarioID}`);\r\n\r\n                //Tomamos la data directamente de dicho usuarioID\r\n                const snapshot = await get(dbRef);\r\n\r\n                //Checamos si existe un snapshot con dicha información específica\r\n                if (snapshot.exists()) {\r\n                    //Extraemos la información del usuario del snapshot\r\n                    const userData = snapshot.val();\r\n\r\n                    //Seteamos la data de usuario en nuestro estado global de usuario\r\n                    setUsuarioActual(userData);\r\n                    console.log(\"Dentro de crearTarea, si agarramos usuario\");\r\n                }else{\r\n                    console.log(\"No se encontró un usuario con dicha información\")\r\n                }\r\n            }catch(error){\r\n                console.error(\"Error consiguiendo la información del usuario\")\r\n            }\r\n        };\r\n\r\n        fetchUsuario();\r\n    }, [usuarioID]); //Incluimos éste caso como dependencia para recorrer el efecto si hay cambios\r\n\r\n    //Éste es para extraer todos los proyectos\r\n    useEffect(() => {\r\n        if (!usuarioActual) return;\r\n        const fetchAllProyectosUsuario = async() => {\r\n            const db = getDatabase(app);\r\n            const dbRef = ref(db, \"proyectos\");\r\n            const snapshot = await get(dbRef);\r\n\r\n            if (snapshot.exists()) {\r\n                const proyectData = snapshot.val();\r\n                const proyectList = Object.keys(proyectData).map(myID => {\r\n                    return {\r\n                        ...proyectData[myID],\r\n                        proyectoID: myID\r\n                    }\r\n                })\r\n\r\n                /*Una vez tenemos toda la lista como tal, vamos a tomar el valor de colaboradores,\r\n                y vamos a checar o filtrar solo todos los proyectos que tengan al usuarioID como colaborador*/\r\n\r\n                console.log(\"Lista de proyectos sin filtrado: \", proyectList);\r\n\r\n                const proyectosUsuario = proyectList.filter(proyecto => proyecto.colaboradores.includes(usuarioID));\r\n\r\n                setProyectosUsuario(proyectosUsuario);\r\n                console.log(\"Todos los proyectos del usuario: \", proyectosUsuario);\r\n            }\r\n        }\r\n        fetchAllProyectosUsuario();\r\n    }, [usuarioActual])\r\n\r\n    const handleCerrarSesion = () => {\r\n        setUsuarioActual(null);\r\n        navigate('/');\r\n    };\r\n    \r\n    /*Una vez extraídos todos los proyectos en los que se relaciona el usuario, vamos a extraer las tareas que\r\n    se relacionen con dicho proyecto, y de ahí, extraemos las tareas relacionadas con dicho usuario*/\r\n    const fetchAllTareasUsuario = async() =>{\r\n        const db = getDatabase(app);\r\n\r\n        //Inicializamos un array donde se guardan todos las tareas filtradas como tal\r\n        let allTareas = []; \r\n\r\n        //Iteramos por cada uno de los proyectos, para buscar las tareas primeramente\r\n        for (const proyecto of proyectosUsuario){\r\n            const dbRef = ref(db, \"tareas\");\r\n            const snapshot = await get(dbRef);\r\n\r\n            if (snapshot.exists()) {\r\n                const tareasData = snapshot.val();\r\n\r\n                const tareas = Object.keys(tareasData).map(myID => {\r\n                    return {\r\n                        ...tareasData[myID],\r\n                        tareaID: myID\r\n                    }\r\n                })\r\n\r\n                //Filtramos la tarea con base al proyecto\r\n                const tareasProyecto = tareas.filter(tarea => tarea.idProyecto === proyecto.proyectoID);\r\n                console.log(\"Lista de tareas filtradas por proyecto: \", tareasProyecto);\r\n\r\n                //Filtramos las tareas donde el usuario es asignado como encargado\r\n                const tareasUsuario = tareasProyecto.filter(tarea => tarea.encargados.includes(usuarioID));\r\n\r\n                allTareas = allTareas.concat(tareasUsuario)\r\n            }\r\n        }\r\n\r\n        setTareasUsuario(allTareas);\r\n        console.log(\"Todos las tareas del usuario: \", allTareas);\r\n    }\r\n    \r\n    const filtrarDatos = async() => {\r\n        //Filtramos las tareas como tal basadas en el nivel de prioridad\r\n        const filteredTareas = tareasUsuario.filter(tarea => {\r\n            //Checamos si la tarea como tal es de dicho proyecto\r\n            const perteneceAProyecto = tarea.idProyecto === selectedProyecto.proyectoID;\r\n\r\n            //Checamos si la prioridad de la tarea como tal es  igual al nivel de prioridad\r\n            const checkPrioridad = parseInt(tarea.prioridad) === valorPrioridad;\r\n            \r\n            //Retornamos verdadero si se cumplen ambos casos\r\n            return perteneceAProyecto && checkPrioridad;\r\n        });\r\n        //Actualizamos el state de como se filtran las tareas\r\n\r\n        setTareasUsuario(filteredTareas);\r\n        console.log(\"Todos las tareas filtradas basado en prioridad y proyecto: \", filteredTareas);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!proyectosUsuario) return;\r\n        fetchAllTareasUsuario();\r\n    }, [proyectosUsuario, usuarioID])\r\n\r\n\r\n    /*Finalmente, el useEffect encargado de dada seleccionada una opción de búsqueda, que muestre los datos\r\n    como tal del proyecto o programa*/\r\n    useEffect(() => {\r\n        if (!selectedProyecto || !tareasUsuario.length) return;\r\n        fetchAllTareasUsuario();\r\n        filtrarDatos();\r\n    }, [selectedProyecto, valorPrioridad])\r\n\r\n    /*Creamos o iteramos las tareas como tal, y con base a éstas creamos los eventos como tal*/\r\n    const events = tareasUsuario.map(tarea => ({\r\n        //La fecha está en el formato \"YYYY-MM-DDTHH:mm:ss\"\r\n        start: new Date(tarea.fecha), \r\n        end:   new Date(tarea.fecha),\r\n        title: tarea.nombre\r\n    }));\r\n\r\n    if (!usuarioID || !usuarioActual || !proyectosUsuario || !tareasUsuario){\r\n        return <div>Cargando</div>\r\n    }\r\n\r\n    //Función de control\r\n    const handleProyectoChange = (event) => {\r\n        //Primero que todo vamos a agarrar el objeto de búsqueda como tal, y setearlo como producto a buscar\r\n        const proyectoID = event.target.value;\r\n        const selected = proyectosUsuario.find(proyecto => proyecto.proyectoID === proyectoID);\r\n        setSelectedProyecto(selected);\r\n\r\n        console.log(\"Proyecto seleccionado en lista: \", selected);\r\n    };\r\n\r\n    const handlePrioridadChange = (event) => {\r\n        setValorPrioridad(parseInt(event.target.value));\r\n    }\r\n\r\n    // Custom render function for event content\r\n    const renderEventContent = (eventInfo) => {\r\n        return (\r\n            <div>\r\n                <b>{eventInfo.timeText}</b>\r\n                <p>{eventInfo.event.title}</p>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <section className=\"Plataforma\">\r\n            <section className='Tab'>\r\n                <div>\r\n                    <img src={logo} alt='Proyex logo'/>\r\n                    <label>Bienvenido: {usuarioActual.nombre}</label>\r\n                </div>\r\n                <div>\r\n                    <button onClick={handleCerrarSesion}>Cerrar Sesión</button>\r\n                </div>\r\n            </section>\r\n\r\n            <section className='Calendario'>\r\n                <section className='input-container'>\r\n                    <div className='select-container'>\r\n                        <label>Buscar por Proyecto: </label>\r\n                        <select onChange={handleProyectoChange}>\r\n                            <option value=\"\">Seleccione un Proyecto</option>\r\n                            {proyectosUsuario.map(proyecto => (\r\n                                <option key={proyecto.proyectoID} value={proyecto.proyectoID}>{proyecto.nombre}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className='slider-container'>\r\n                        <label>Prioridad: </label>\r\n                        <input type=\"range\" \r\n                            min=\"1\"\r\n                            max=\"10\" \r\n                            value={valorPrioridad}\r\n                            onChange={handlePrioridadChange} \r\n                            className=\"slider\"/>\r\n                        <span className='slider-value'>{valorPrioridad}</span>\r\n                    </div>\r\n                </section>\r\n                \r\n                <FullCalendar\r\n                    plugins={[dayGridPlugin]}\r\n                    initialView='dayGridMonth'\r\n                    weekends={true} //Mostrar sábado y domingo\r\n                    events={events}\r\n                    eventContent={renderEventContent}\r\n                />\r\n            </section>\r\n        </section>\r\n    )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}