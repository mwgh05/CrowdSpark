{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Documents\\\\GitHub\\\\Gestionador-Proyectos-Grupal\\\\frontend\\\\src\\\\components\\\\AdministrarProyecto.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n//Parte gráfica\nimport { DeleteForever, SupervisorAccount, Settings } from '@mui/icons-material';\nimport './styles/AdministrarProyecto.css';\nimport logo from '../images/icon.png';\nimport { useNavigate, Link } from \"react-router-dom\";\n\n/*Como tal, la plataforma, sea desde registro o desde iniciar sesión, siempre recibe una id de usuario, ésta\r\nid nos servirá para sellar el usuario del sistema a usar, será el parámetro id de usuario*/\nimport { useParams } from 'react-router-dom';\n\n//Base de datos por firebase\nimport app from \"../firebaseConfig.js\";\nimport { getDatabase, get, ref, set, push, update } from 'firebase/database';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AdministrarProyecto() {\n  _s();\n  const {\n    usuarioID,\n    proyectoID\n  } = useParams();\n\n  //Usamos el state para restaurar datos o información\n  const [usuarioActual, setUsuarioActual] = useState(null);\n  const [proyectoActual, setProyectoActual] = useState(null);\n\n  //Todos los usuarios como tal y las tareas\n  const [usuarios, setUsuarios] = useState([]);\n  const [tareas, setTareas] = useState([]);\n\n  //Muy basado en Registrar.jsx, checar la documentación de éste\n  const [proyecto, setProyecto] = useState({\n    //Inicialmente pasamos todos los datos directamente, si no es nulo, los datos estarán en el programa\n    nombre: proyectoActual ? proyectoActual.nombre : \"\",\n    fecha: proyectoActual ? proyectoActual.fecha : \"\",\n    tareas: tareas,\n    colaboradores: usuarios,\n    lider: proyectoID\n  });\n  const navigate = useNavigate();\n\n  //Sacamos los datos de los usuarios\n  useEffect(() => {\n    const fetchUsuario = async () => {\n      try {\n        //Primero seteamos la base de datos como tal, checando directamente la id\n        const db = getDatabase(app);\n        const dbRef = ref(db, `usuarios/${usuarioID}`);\n\n        //Tomamos la data directamente de dicho usuarioID\n        const snapshot = await get(dbRef);\n\n        //Checamos si existe un snapshot con dicha información específica\n        if (snapshot.exists()) {\n          //Extraemos la información del usuario del snapshot\n          const userData = snapshot.val();\n\n          //Seteamos la data de usuario en nuestro estado global de usuario\n          setUsuarioActual(userData);\n          console.log(\"Dentro de crearTarea, si agarramos usuario\");\n        } else {\n          console.log(\"No se encontró un usuario con dicha información\");\n        }\n      } catch (error) {\n        console.error(\"Error consiguiendo la información del usuario\");\n      }\n    };\n    const fetchProyecto = async () => {\n      try {\n        const db = getDatabase(app);\n        const dbRef = ref(db, `proyectos/${proyectoID}`);\n        const snapshot = await get(dbRef);\n        if (snapshot.exists()) {\n          const projectData = snapshot.val();\n          setProyectoActual(projectData);\n          console.log(\"Dentro de crearTarea, si agarramos proyecto\");\n        }\n      } catch (error) {\n        console.error(\"Error consiguiendo la información del usuario\");\n      }\n    };\n    fetchUsuario();\n    fetchProyecto();\n  }, [usuarioID, proyectoID]); //Incluimos éste caso como dependencia para recorrer el efecto si hay cambios\n\n  //Método para filtrar los usuarios de\n  useEffect(() => {\n    //Primero, se depende del proyecto actual para continuar\n    if (!proyectoActual) return;\n    const fetchAllUsersProyecto = async () => {\n      //Tomamos la base de datos a la cual nos conectamos\n      const db = getDatabase(app);\n\n      //Referenciamos la base de datos, la ubicación donde guardamos los usuarios\n      const dbRef = ref(db, \"usuarios\");\n\n      //Buscamos información dentro de los casos, mediante un snapshot\n      const snapshot = await get(dbRef);\n      if (snapshot.exists()) {\n        //Nos encargamos de filtrar todos los usuarios que estén dentro del proyecto como tal\n\n        //Extraemos la información y las llaves como tal\n        const usersData = snapshot.val();\n        const usersList = Object.keys(usersData).map(myID => {\n          return {\n            ...usersData[myID],\n            usuarioID: myID\n          };\n        });\n        const colaboradores = proyectoActual.colaboradores || [];\n\n        //Filtramos como tal\n        const usersInProyecto = usersList.filter(usuario => colaboradores.includes(usuario.usuarioID));\n        setUsuarios(usersInProyecto);\n        console.log(\"Todos los datos del proyecto: \", usersInProyecto);\n      } else {\n        console.log(\"No hay valores dentro de nuestra tabla de base de datos\");\n      }\n    };\n    const fetchAllTareasProyecto = async () => {\n      const db = getDatabase(app);\n      const dbRef = ref(db, \"tareas\");\n      const snapshot = await get(dbRef);\n      if (snapshot.exists()) {\n        const tareasData = snapshot.val();\n        const tareasList = Object.keys(tareasData).map(myID => {\n          return {\n            ...tareasData[myID],\n            tareaID: myID\n          };\n        });\n        const tareasInProyecto = tareasList.filter(tarea => tarea.idProyecto === proyectoID);\n        setTareas(tareasInProyecto);\n        console.log(\"Todos las tareas del proyecto: \", tareasInProyecto);\n      }\n    };\n    fetchAllUsersProyecto();\n    fetchAllTareasProyecto();\n  }, [proyectoActual]);\n\n  //Método para agarrar y actualizar el valor de proyecto inicial\n  useEffect(() => {\n    if (!proyectoActual || !tareas || !usuarios) return;\n    setProyecto(prevProyecto => ({\n      ...prevProyecto,\n      nombre: proyectoActual.nombre || \"\",\n      fecha: proyectoActual.fecha || \"\",\n      tareas: tareas,\n      colaboradores: usuarios,\n      lider: proyectoID\n    }));\n  }, [proyectoActual, tareas, usuarios]);\n\n  //Función para establecer cambios\n  const handleUserChange = event => {\n    setProyecto(prev => ({\n      ...prev,\n      [event.target.name]: event.target.value\n    }));\n    console.log(\"Cambios aplicados como tal: \", proyecto);\n  };\n  const handleModificarTarea = async event => {\n    event.preventDefault();\n    try {\n      const db = getDatabase(app);\n      if (!proyecto.nombre || !proyecto.fecha) {\n        alert('Por favor, completa todos los campos.');\n        return;\n      }\n      console.log(\"Tarea imprimir como tal: \", proyecto);\n\n      //Creamos una carpeta o archivo basado en el string de posición\n      const updProyectoRef = ref(db, `proyectos/${proyectoID}`);\n      await update(updProyectoRef, {\n        nombre: proyecto.nombre,\n        fecha: proyecto.fecha\n      });\n\n      //Actualización se ha hecho de forma correcta\n      alert(\"Se ha actualizado correctamente los datos del proyecto\");\n      navigate(`/Tareas/${usuarioID}/${proyectoID}`);\n    } catch (error) {\n      console.error(\"Ha aparecido un error: \", error);\n      alert(\"Error al guardar los datos\");\n    }\n  };\n  const handleDeleteUser = async (event, id_usuario) => {\n    event.preventDefault(); //Evitamos reinicio de pantalla\n\n    if (window.confirm(\"¿Estás seguro que quieres quitar a este usuario del proyecto?\")) {\n      try {\n        const db = getDatabase(app);\n\n        //Removemos la ID del usuario de la lista de colaboradores\n        const colaboradoresActualizado = proyecto.colaboradores.filter(usuario => usuario.usuarioID !== id_usuario);\n\n        //Checamos que el dato como tal sea o no un array\n        console.log(\"Valor antes de convertir o checar en array: \", colaboradoresActualizado);\n\n        //Ahora simplemente hacemos un mapeado para extraer las id de usuario como tal\n        const updColaboradores = colaboradoresActualizado.map(usuario => usuario.usuarioID);\n        console.log(\"Luego de extraer las id: \", updColaboradores);\n\n        //Actualizamos el proyecto en la base de datos con la lista de colaboradores\n        const proyectoActualizar = ref(db, `proyectos/${proyectoID}/colaboradores`);\n        await set(proyectoActualizar, updColaboradores);\n\n        //Actualizamos el estado de la nueva lista de colaboradores como tal\n        setProyecto(prevProyecto => ({\n          ...prevProyecto,\n          colaboradores: colaboradoresActualizado\n        }));\n        alert(\"Se ha eliminado al usuario de la lista de colaboradores del proyecto\");\n      } catch (error) {\n        console.error(\"Ha aparecido un error: \", error);\n      }\n    } else {\n      console.log(\"La eliminación del usuario ha sido cancelada\");\n    }\n  };\n\n  //Botones encargados de enviar el usuario a las tareas, o a modificar tarea como tal\n  const handleTareaClick = async (event, tareaID) => {};\n  const handleConfiguracionClick = async (event, tareaID) => {};\n  if (!usuarioID || !proyectoID || !usuarioActual || !proyectoActual) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Cargando\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"App-content\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"Form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Elemento\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"Titulo\",\n          children: \"Administrar Proyecto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Elemento\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Nombre\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: 'text',\n          placeholder: \"Aplicacion\",\n          name: \"nombre\",\n          value: proyecto.nombre,\n          onChange: handleUserChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Elemento\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Fecha y hora de entrega\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: 'datetime-local',\n          placeholder: \"2018-06-12T19:30\",\n          name: \"fecha\",\n          value: proyecto.fecha,\n          onChange: handleUserChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Elemento\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Lista de tareas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Section\",\n          children: proyecto.tareas.map(tarea => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Tareas\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: () => handleTareaClick(tarea.tareaID),\n              children: tarea.nombre\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleConfiguracionClick(tarea.tareaID),\n              children: /*#__PURE__*/_jsxDEV(Settings, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 33\n            }, this)]\n          }, tarea.tareaID, true, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Elemento\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Lista de miembros\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Section\",\n          children: proyecto.colaboradores.map(usuario => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Member\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [usuario.nombre, usuario.usuarioID === usuarioID && /*#__PURE__*/_jsxDEV(SupervisorAccount, {\n                className: \"supervisor-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 73\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 33\n            }, this), usuario.usuarioID !== usuarioID && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: event => handleDeleteUser(event, usuario.usuarioID),\n              children: /*#__PURE__*/_jsxDEV(DeleteForever, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 37\n            }, this)]\n          }, usuario.usuarioID, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Elemento\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleModificarTarea,\n          children: \"Modificar Proyecto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 9\n  }, this);\n}\n_s(AdministrarProyecto, \"HGps0Zd9Vz5F86Fw+/7N83i/RKM=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = AdministrarProyecto;\nvar _c;\n$RefreshReg$(_c, \"AdministrarProyecto\");","map":{"version":3,"names":["React","useState","useEffect","DeleteForever","SupervisorAccount","Settings","logo","useNavigate","Link","useParams","app","getDatabase","get","ref","set","push","update","jsxDEV","_jsxDEV","AdministrarProyecto","_s","usuarioID","proyectoID","usuarioActual","setUsuarioActual","proyectoActual","setProyectoActual","usuarios","setUsuarios","tareas","setTareas","proyecto","setProyecto","nombre","fecha","colaboradores","lider","navigate","fetchUsuario","db","dbRef","snapshot","exists","userData","val","console","log","error","fetchProyecto","projectData","fetchAllUsersProyecto","usersData","usersList","Object","keys","map","myID","usersInProyecto","filter","usuario","includes","fetchAllTareasProyecto","tareasData","tareasList","tareaID","tareasInProyecto","tarea","idProyecto","prevProyecto","handleUserChange","event","prev","target","name","value","handleModificarTarea","preventDefault","alert","updProyectoRef","handleDeleteUser","id_usuario","window","confirm","colaboradoresActualizado","updColaboradores","proyectoActualizar","handleTareaClick","handleConfiguracionClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Usuario/Documents/GitHub/Gestionador-Proyectos-Grupal/frontend/src/components/AdministrarProyecto.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n//Parte gráfica\r\nimport { DeleteForever, SupervisorAccount, Settings } from '@mui/icons-material'\r\nimport './styles/AdministrarProyecto.css';\r\nimport logo from '../images/icon.png';\r\n\r\nimport {useNavigate, Link} from \"react-router-dom\";\r\n\r\n/*Como tal, la plataforma, sea desde registro o desde iniciar sesión, siempre recibe una id de usuario, ésta\r\nid nos servirá para sellar el usuario del sistema a usar, será el parámetro id de usuario*/\r\nimport { useParams } from 'react-router-dom';\r\n\r\n//Base de datos por firebase\r\nimport app from \"../firebaseConfig.js\";\r\nimport { getDatabase, get, ref, set, push, update } from 'firebase/database';\r\n\r\nexport default function AdministrarProyecto() {\r\n    const { usuarioID, proyectoID } = useParams();\r\n\r\n    //Usamos el state para restaurar datos o información\r\n    const [usuarioActual, setUsuarioActual] = useState(null);\r\n    const [proyectoActual, setProyectoActual] = useState(null);\r\n\r\n    //Todos los usuarios como tal y las tareas\r\n    const [usuarios, setUsuarios] = useState([]);\r\n    const [tareas, setTareas] = useState([]);\r\n\r\n    //Muy basado en Registrar.jsx, checar la documentación de éste\r\n    const [proyecto, setProyecto] = useState({\r\n        //Inicialmente pasamos todos los datos directamente, si no es nulo, los datos estarán en el programa\r\n        nombre: proyectoActual ? proyectoActual.nombre : \"\",\r\n        fecha:  proyectoActual ? proyectoActual.fecha : \"\",\r\n        tareas: tareas,\r\n        colaboradores: usuarios,\r\n        lider: proyectoID\r\n    })\r\n\r\n    const navigate = useNavigate();\r\n\r\n    //Sacamos los datos de los usuarios\r\n    useEffect(() => {\r\n        const fetchUsuario = async() => {\r\n            try {\r\n                //Primero seteamos la base de datos como tal, checando directamente la id\r\n                const db = getDatabase(app);\r\n                const dbRef = ref(db, `usuarios/${usuarioID}`);\r\n\r\n                //Tomamos la data directamente de dicho usuarioID\r\n                const snapshot = await get(dbRef);\r\n\r\n                //Checamos si existe un snapshot con dicha información específica\r\n                if (snapshot.exists()) {\r\n                    //Extraemos la información del usuario del snapshot\r\n                    const userData = snapshot.val();\r\n\r\n                    //Seteamos la data de usuario en nuestro estado global de usuario\r\n                    setUsuarioActual(userData);\r\n                    console.log(\"Dentro de crearTarea, si agarramos usuario\");\r\n                }else{\r\n                    console.log(\"No se encontró un usuario con dicha información\")\r\n                }\r\n            }catch(error){\r\n                console.error(\"Error consiguiendo la información del usuario\")\r\n            }\r\n        };\r\n\r\n        const fetchProyecto = async() => {\r\n            try{\r\n                const db = getDatabase(app);\r\n                const dbRef = ref(db, `proyectos/${proyectoID}`);\r\n                const snapshot = await get(dbRef);\r\n\r\n                if (snapshot.exists()){\r\n                    const projectData = snapshot.val();\r\n                    setProyectoActual(projectData);\r\n                    \r\n                    console.log(\"Dentro de crearTarea, si agarramos proyecto\");\r\n                }\r\n            }catch(error){\r\n                console.error(\"Error consiguiendo la información del usuario\")\r\n            }\r\n        };\r\n\r\n        fetchUsuario();\r\n        fetchProyecto();\r\n    }, [usuarioID, proyectoID]); //Incluimos éste caso como dependencia para recorrer el efecto si hay cambios\r\n\r\n    //Método para filtrar los usuarios de\r\n    useEffect(() => {\r\n        //Primero, se depende del proyecto actual para continuar\r\n        if (!proyectoActual) return; \r\n\r\n        const fetchAllUsersProyecto = async () => {\r\n            //Tomamos la base de datos a la cual nos conectamos\r\n            const db = getDatabase(app);\r\n\r\n            //Referenciamos la base de datos, la ubicación donde guardamos los usuarios\r\n            const dbRef = ref(db, \"usuarios\");\r\n\r\n            //Buscamos información dentro de los casos, mediante un snapshot\r\n            const snapshot = await get(dbRef);\r\n\r\n            if (snapshot.exists()) {\r\n                //Nos encargamos de filtrar todos los usuarios que estén dentro del proyecto como tal\r\n\r\n                //Extraemos la información y las llaves como tal\r\n                const usersData = snapshot.val();\r\n                const usersList = Object.keys(usersData).map(myID => {\r\n                    return {\r\n                        ...usersData[myID],\r\n                        usuarioID: myID\r\n                    }\r\n                })\r\n\r\n                const colaboradores = proyectoActual.colaboradores || [];\r\n\r\n                //Filtramos como tal\r\n                const usersInProyecto = usersList.filter(usuario => colaboradores.includes(usuario.usuarioID))\r\n\r\n                setUsuarios(usersInProyecto);\r\n                console.log(\"Todos los datos del proyecto: \", usersInProyecto);\r\n            } else{\r\n                console.log(\"No hay valores dentro de nuestra tabla de base de datos\");\r\n            }\r\n        };\r\n\r\n        const fetchAllTareasProyecto = async () => {\r\n            const db = getDatabase(app);\r\n            const dbRef = ref(db, \"tareas\");\r\n            const snapshot = await get(dbRef);\r\n\r\n            if (snapshot.exists()) {\r\n                const tareasData = snapshot.val();\r\n                const tareasList = Object.keys(tareasData).map(myID => {\r\n                    return {\r\n                        ...tareasData[myID],\r\n                        tareaID: myID\r\n                    }\r\n                });\r\n\r\n                const tareasInProyecto = tareasList.filter(tarea => tarea.idProyecto === proyectoID);\r\n                setTareas(tareasInProyecto);\r\n                console.log(\"Todos las tareas del proyecto: \", tareasInProyecto);\r\n            }\r\n        }\r\n\r\n        fetchAllUsersProyecto();\r\n        fetchAllTareasProyecto();\r\n    }, [proyectoActual])\r\n\r\n\r\n    //Método para agarrar y actualizar el valor de proyecto inicial\r\n    useEffect(() => {\r\n        if (!proyectoActual || !tareas || !usuarios) return; \r\n        \r\n        setProyecto(prevProyecto => ({\r\n            ...prevProyecto,\r\n            nombre: proyectoActual.nombre || \"\",\r\n            fecha: proyectoActual.fecha || \"\",\r\n            tareas: tareas,\r\n            colaboradores: usuarios,\r\n            lider: proyectoID\r\n        }))\r\n    }, [proyectoActual, tareas, usuarios])\r\n\r\n    //Función para establecer cambios\r\n    const handleUserChange = (event) => {\r\n        setProyecto(\r\n            prev => ({...prev, [event.target.name]: event.target.value})\r\n        );\r\n\r\n        console.log(\"Cambios aplicados como tal: \", proyecto)\r\n    }\r\n\r\n    const handleModificarTarea = async(event) => {\r\n        event.preventDefault();\r\n        try{\r\n            const db = getDatabase(app);\r\n\r\n            if (!proyecto.nombre || \r\n                !proyecto.fecha) {\r\n                alert('Por favor, completa todos los campos.');\r\n                return;\r\n            }\r\n\r\n            console.log(\"Tarea imprimir como tal: \", proyecto);\r\n\r\n            //Creamos una carpeta o archivo basado en el string de posición\r\n            const updProyectoRef = ref(db, `proyectos/${proyectoID}`);\r\n            await update(updProyectoRef, {\r\n                nombre: proyecto.nombre,\r\n                fecha: proyecto.fecha\r\n            })\r\n            \r\n            //Actualización se ha hecho de forma correcta\r\n            alert(\"Se ha actualizado correctamente los datos del proyecto\");\r\n            navigate(`/Tareas/${usuarioID}/${proyectoID}`);\r\n        } catch (error) {\r\n            console.error(\"Ha aparecido un error: \", error);\r\n            alert(\"Error al guardar los datos\");\r\n        }\r\n    }\r\n    \r\n    const handleDeleteUser = async(event, id_usuario) => {\r\n        event.preventDefault(); //Evitamos reinicio de pantalla\r\n\r\n        if (window.confirm(\"¿Estás seguro que quieres quitar a este usuario del proyecto?\")){\r\n            try {\r\n                const db = getDatabase(app);\r\n\r\n                //Removemos la ID del usuario de la lista de colaboradores\r\n                const colaboradoresActualizado = proyecto.colaboradores.filter(usuario=>\r\n                    usuario.usuarioID !== id_usuario)\r\n\r\n                //Checamos que el dato como tal sea o no un array\r\n                console.log(\"Valor antes de convertir o checar en array: \", colaboradoresActualizado);\r\n\r\n                //Ahora simplemente hacemos un mapeado para extraer las id de usuario como tal\r\n                const updColaboradores = colaboradoresActualizado.map(usuario => usuario.usuarioID);\r\n                \r\n                console.log(\"Luego de extraer las id: \", updColaboradores);\r\n                \r\n                //Actualizamos el proyecto en la base de datos con la lista de colaboradores\r\n                const proyectoActualizar = ref(db, `proyectos/${proyectoID}/colaboradores`);\r\n                await set(proyectoActualizar, updColaboradores);\r\n\r\n                //Actualizamos el estado de la nueva lista de colaboradores como tal\r\n                setProyecto(prevProyecto => ({\r\n                    ...prevProyecto,\r\n                    colaboradores: colaboradoresActualizado\r\n                }))\r\n\r\n                alert(\"Se ha eliminado al usuario de la lista de colaboradores del proyecto\");\r\n            } catch(error){\r\n                console.error(\"Ha aparecido un error: \", error);\r\n            }\r\n        } else {\r\n            console.log(\"La eliminación del usuario ha sido cancelada\")\r\n        }\r\n    }\r\n\r\n    //Botones encargados de enviar el usuario a las tareas, o a modificar tarea como tal\r\n    const handleTareaClick = async(event, tareaID) => {\r\n\r\n    }\r\n    const handleConfiguracionClick = async(event, tareaID) => {\r\n        \r\n    }\r\n\r\n    if (!usuarioID || !proyectoID || !usuarioActual || !proyectoActual){\r\n        return <div>Cargando</div>\r\n    }\r\n\r\n    return (\r\n        <section className=\"App-content\">\r\n            <form className='Form'>\r\n                <div className='Elemento'>\r\n                    <label className='Titulo'>Administrar Proyecto</label>\r\n                </div>\r\n\r\n                <div className='Elemento'>\r\n                    <label>Nombre</label>\r\n                    <input type={'text'} placeholder='Aplicacion' name='nombre'\r\n                    value={proyecto.nombre} onChange={handleUserChange}/>\r\n                </div>\r\n\r\n                <div className='Elemento'>\r\n                    <label>Fecha y hora de entrega</label>\r\n                    <input type={'datetime-local'} placeholder='2018-06-12T19:30' name='fecha'\r\n                    value={proyecto.fecha} onChange={handleUserChange}/>\r\n                </div>\r\n\r\n                <div className='Elemento'>\r\n                    <label>Lista de tareas</label>\r\n                    <div className='Section'>\r\n                        {proyecto.tareas.map(tarea => (\r\n                            <div key={tarea.tareaID} className='Tareas'>\r\n                                <span onClick={() => handleTareaClick(tarea.tareaID)}>\r\n                                    {tarea.nombre}\r\n                                </span>\r\n                                <button onClick={() => handleConfiguracionClick(tarea.tareaID)}>\r\n                                    <Settings/>\r\n                                </button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='Elemento'>\r\n                    <label>Lista de miembros</label>\r\n                    <div className='Section'>\r\n                        {proyecto.colaboradores.map(usuario => (\r\n                            <div key={usuario.usuarioID} className='Member'>\r\n                                <span>\r\n                                    {usuario.nombre} \r\n                                    {usuario.usuarioID === usuarioID && <SupervisorAccount className='supervisor-icon'/>}</span>\r\n                                {usuario.usuarioID !== usuarioID && (\r\n                                    <button onClick={(event) => handleDeleteUser(event, usuario.usuarioID)}>\r\n                                        <DeleteForever/>\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='Elemento'>\r\n                    <button onClick={handleModificarTarea}>Modificar Proyecto</button>\r\n                </div>\r\n            </form>\r\n        </section>\r\n    )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}